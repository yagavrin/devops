services:
  storage:
    image: minio/minio:latest
    command: server /data
    restart: always
    expose: 
      - 9000
    environment:
      MINIO_ROOT_USER: ${Storage_AccessKey:-STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${Storage_Secret:-STORAGE_SECRET_KEY}
      MINIO_PROMETHEUS_AUTH_TYPE: public
    volumes:
      - data:/data
    networks:
      - gateway_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    image: minio/mc
    depends_on:
      - storage
    restart: on-failure
    networks:
      - gateway_net
    entrypoint: > 
      /bin/sh -c "      
      /usr/bin/mc config host add storage http://storage:9000 ${Storage_AccessKey:-STORAGE_ACCESS_KEY} ${Storage_Secret:-STORAGE_SECRET_KEY} &&
      /usr/bin/mc mb --ignore-existing storage/${Storage_Bucket:-data} &&
      /usr/bin/mc anonymous set public storage/${Storage_Bucket:-data} &&
      exit 0;
      "

  uploader:
    build: ./uploader
    depends_on:
      - storage
      - createbuckets
    expose: 
      - 3000
    networks:
      - gateway_net
    environment:
      PORT: 3000
      S3_HOST: storage
      S3_PORT: 9000
      S3_ACCESS_KEY: ${Storage_AccessKey:-STORAGE_ACCESS_KEY}
      S3_ACCESS_SECRET: ${Storage_Secret:-STORAGE_SECRET_KEY}
      S3_BUCKET: ${Storage_Bucket:-STORAGE_BUCKET}
  
  security:
    build: ./security
    networks:
      - gateway_net
    expose: 
      - 3000
    environment:
      PORT: 3000
  nginx:
    image: nginx:latest
    container_name: api-gateway
    ports:
      - "80:80"
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - storage
      - uploader
      - security
    networks:
      - gateway_net
  prometheus:
    image: prom/prometheus
    restart: on-failure
    volumes:
     - ./prometheus:/etc/prometheus
    networks:
     - gateway_net
  node_exporter:
    image: prom/node-exporter:latest
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/host:ro,rslave'
    pid: host
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    restart: on-failure
    networks:
      - gateway_net
  grafana:
    image: grafana/grafana-enterprise
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana_vol:/var/lib/grafana
    ports:
      - 8081:3000
    restart: on-failure
    networks:
     - gateway_net
  es-hot:
    image: elasticsearch:8.7.0
    container_name: es-hot
    environment:
      - node.name=es-hot
      - node.roles=master,data_content,data_hot  
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "http.host=0.0.0.0"
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
      - discovery.type=single-node
    volumes:
      - data01:/usr/share/elasticsearch/data:Z
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - 9200:9200
    networks:
      - gateway_net

  kibana:
    image: kibana:8.7.0
    container_name: kibana
    ports:
      - 8082:5601
    environment:
      ELASTICSEARCH_HOSTS: '["http://es-hot:9200"]'
    networks:
      - gateway_net
    depends_on:
      - es-hot
  vector:
    image: timberio/vector:latest-debian
    container_name: vector
    volumes:
    - ./vector/vector.yaml:/etc/vector/vector.yaml:Z
    - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
    - gateway_net
    depends_on:
    - es-hot

volumes:
  data:
  prometheus-data:
  grafana_vol:
  data01:

networks:
  gateway_net: